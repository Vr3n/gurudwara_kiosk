// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Gurudwara {
    id          String  @id @default(cuid())
    name        String

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    locations   Location[]
    histories   History[]
    news        News[]
    journals    Journal[]
    videos      Video[]
    images      Image[]
}


model City {
    id          String  @id @default(cuid())
    name        String
    longitude   Decimal
    latitude    Decimal

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    locations   Location[]
}




model Location {
    id          String  @id @default(cuid())
    state       String?
    country     String?
    zipcode     String?
    longitude   Decimal
    latitude    Decimal
    gurudwaraId String
    gurudwara   Gurudwara    @relation(fields: [gurudwaraId], references: [id], onDelete: Cascade)


    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    cityId     String
    city       City    @relation(fields: [cityId], references: [id], onDelete: Cascade)
}


model History {
    id          String  @id @default(cuid())
    title       String
    source      String?
    content     String?
    description String?

    gurudwaraId String
    gurudwara   Gurudwara    @relation(fields: [gurudwaraId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}



model News {
    id          String  @id @default(cuid())
    title       String
    source      String?
    content     String?
    description String?

    gurudwaraId String
    gurudwara   Gurudwara    @relation(fields: [gurudwaraId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

}


model Journal {
    id          String  @id @default(cuid())
    title       String
    source      String?
    description String?
    content     String?

    gurudwaraId String
    gurudwara   Gurudwara    @relation(fields: [gurudwaraId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

}

model Video {
    id          String  @id @default(cuid())
    url         String  @unique
    name        String?

    gurudwaraId String
    gurudwara   Gurudwara    @relation(fields: [gurudwaraId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

}


model Image {
    id          String  @id @default(cuid())
    url         String  @unique
    name        String?

    gurudwaraId String
    gurudwara   Gurudwara    @relation(fields: [gurudwaraId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

}
